---
title: "Research"
listing:
  - id: articles
    contents: "articles/*/index.qmd"
    sort: "date desc"
    template: ../html/research/listing.ejs
    
    categories: true
  - id: working-papers
    contents: "working-papers/*/index.qmd"
    sort: "date desc"
    template: ../html/research/listing.ejs
    categories: true
    
#   - id: works-in-progress
#     contents: "works-in-progress/*/index.qmd"
#     sort: "date desc"
#     template: ../html/research/listing.ejs

  # - id: book-chapters
  #   contents: "chapters/*/index.qmd"
  #   sort: "date desc"
  #   template: ../html/research/listing.ejs
  # - id: reviews
  #   contents: "reviews/*/index.qmd"
  #   sort: "date desc"
  #   template: ../html/research/listing.ejs
  # - id: dormant-working-papers
  #   contents: "dormant-working-papers/*/index.qmd"
  #   sort: "date desc"
  #   template: ../html/research/listing.ejs
  # - id: seminar-papers
  #   contents: "seminar-papers/*/index.qmd"
  #   sort: "date desc"
  #   template: ../html/research/listing.ejs
  # - id: translations
  #   contents: "translations/*/index.qmd"
  #   sort: "date desc"
  #   template: ../html/research/listing.ejs
page-layout: full
include-back-link: false
toc-location: right
echo: false
jupyter: python3
---

```{python}
import yaml
from IPython.display import display, Markdown, HTML

def readable_list(_s):
  if len(_s) < 3:
    return ' and '.join(map(str, _s))
  *a, b = _s
  return f"{', '.join(map(str, a))}, and {b}"

def button(url, str, icon):
    icon_base = icon[:2]
    return f"""<a class="btn btn-outline-dark btn-sm", href="{url}" target="_blank" rel="noopener noreferrer">
        <i class="{icon_base} {icon}" role='img' aria-label='{str}'></i>
        {str}
    </a>"""



yaml_data = yaml.safe_load(open("papers.yaml"))
pub_strs = {"pubs": {}, "wps": {}, "worksinprogress": {}}
for key, data in yaml_data.items():
    title_str = data["title"]
    authors = data.get("authors", ["me"])
    authors = [aut if aut != "me" else "<strong>Drew Dimmery</strong>" for aut in authors]
    author_str = readable_list(authors)
    year_str = data["year"]

    buttons = []
    preprint = data.get("preprint")
    if preprint is not None:
        buttons.append(button(preprint, "Preprint", "bi-file-earmark-pdf"))

    github = data.get("github")
    if github is not None:
        buttons.append(button(github, "Github", "bi-github"))

    pub_url = data.get("published_url")
    venue = data.get("venue")
    working_paper = pub_url is None
    paper_type = data.get("paper_type")
    pub_str = f'{author_str}. ({year_str}) "{title_str}."'

    if venue is not None:
        pub_str += f" <em>{venue}</em>"

    if paper_type == "working_paper":
        if year_str not in pub_strs["wps"]:
            pub_strs["wps"][year_str] = []
        pub_strs["wps"][year_str].append(
            "<li class='list-group-item'>" + pub_str + "<br>" + " ".join(buttons) + "</li>"
        )
    if paper_type == "works_prog":
        pub_str = f'{author_str}. "{title_str}."'
        if year_str not in pub_strs["worksinprogress"]:
            pub_strs["worksinprogress"][year_str] = []
        # This line is changed to append a tuple of (key, pub_str)
        pub_strs["worksinprogress"][year_str].append((key, "<li class='list-group-item'>" + pub_str + "<br>" + " ".join(buttons) + "</li>"))
    else:
        if year_str not in pub_strs["pubs"]:
            pub_strs["pubs"][year_str] = []
        buttons.append(button(pub_url, "Published", "ai-archive"))
        pub_strs["pubs"][year_str].append(
            "<li class='list-group-item'>" + pub_str + "<br>" + " ".join(buttons) + "</li>"
        )
```

My research in applied microeconomics and labor economics spans topics on discrimination, race, identity, mental health, immigration. 



## Journal articles

:::{#articles}
:::


## Working papers

:::{#working-papers}
:::

## Works in Progress

<!-- :::{#works-in-progress}
::: -->

```{python}
#| label: "not-published-year-works"
#| id: "not-published-year-works"
#| output: asis
from markdown import markdown  # Import the markdown function

for year in sorted(pub_strs["worksinprogress"].keys(), reverse=True):
    bolded_publications = []
    for key, pub in pub_strs["worksinprogress"][year]:
        notes = yaml_data.get(key, {}).get("notes")
        if notes:
            notes_html = markdown(notes)
            notes_formatted = f"<li class='list-group-item' style='border-top: none; font-size: smaller; padding-top: 0;'>{notes_html}</li>"
        else:
            notes_formatted = ""
        title_and_authors = pub.replace('Hussain Hadah', '<b>Hussain Hadah</b>')
        bolded_publications.append(
            "<ul class='list-group' style='margin-bottom: 15px;'>" +  # Adding margin between publications
            f"<li class='list-group-item' style='border-bottom: none; padding-bottom: 0;'>{title_and_authors}</li>" +  # Removing bottom border & padding
            notes_formatted +
            "</ul>"
        )
    display(HTML('\n'.join(bolded_publications)))
```

<!-- ## Book chapters

:::{#book-chapters}
:::


## Reviews

:::{#reviews}
:::


## Dormant working papers

:::{#dormant-working-papers}
:::


## Selected seminar papers

:::{#seminar-papers}
:::


## Translations

:::{#translations}
::: -->
